// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/proto.proto

#ifndef PROTOBUF_proto_2fproto_2eproto__INCLUDED
#define PROTOBUF_proto_2fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fproto_2eproto();
void protobuf_AssignDesc_proto_2fproto_2eproto();
void protobuf_ShutdownFile_proto_2fproto_2eproto();

class cVector3;
class cBufferNode;

// ===================================================================

class cVector3 : public ::google::protobuf::Message {
 public:
  cVector3();
  virtual ~cVector3();

  cVector3(const cVector3& from);

  inline cVector3& operator=(const cVector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cVector3& default_instance();

  void Swap(cVector3* other);

  // implements Message ----------------------------------------------

  cVector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cVector3& from);
  void MergeFrom(const cVector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline const ::std::string& x() const;
  inline void set_x(const ::std::string& value);
  inline void set_x(const char* value);
  inline void set_x(const char* value, size_t size);
  inline ::std::string* mutable_x();
  inline ::std::string* release_x();
  inline void set_allocated_x(::std::string* x);

  // required string y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline const ::std::string& y() const;
  inline void set_y(const ::std::string& value);
  inline void set_y(const char* value);
  inline void set_y(const char* value, size_t size);
  inline ::std::string* mutable_y();
  inline ::std::string* release_y();
  inline void set_allocated_y(::std::string* y);

  // required string z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline const ::std::string& z() const;
  inline void set_z(const ::std::string& value);
  inline void set_z(const char* value);
  inline void set_z(const char* value, size_t size);
  inline ::std::string* mutable_z();
  inline ::std::string* release_z();
  inline void set_allocated_z(::std::string* z);

  // @@protoc_insertion_point(class_scope:cVector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* x_;
  ::std::string* y_;
  ::std::string* z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fproto_2eproto();
  friend void protobuf_AssignDesc_proto_2fproto_2eproto();
  friend void protobuf_ShutdownFile_proto_2fproto_2eproto();

  void InitAsDefaultInstance();
  static cVector3* default_instance_;
};
// -------------------------------------------------------------------

class cBufferNode : public ::google::protobuf::Message {
 public:
  cBufferNode();
  virtual ~cBufferNode();

  cBufferNode(const cBufferNode& from);

  inline cBufferNode& operator=(const cBufferNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const cBufferNode& default_instance();

  void Swap(cBufferNode* other);

  // implements Message ----------------------------------------------

  cBufferNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cBufferNode& from);
  void MergeFrom(const cBufferNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline const ::std::string& x() const;
  inline void set_x(const ::std::string& value);
  inline void set_x(const char* value);
  inline void set_x(const char* value, size_t size);
  inline ::std::string* mutable_x();
  inline ::std::string* release_x();
  inline void set_allocated_x(::std::string* x);

  // optional string y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline const ::std::string& y() const;
  inline void set_y(const ::std::string& value);
  inline void set_y(const char* value);
  inline void set_y(const char* value, size_t size);
  inline ::std::string* mutable_y();
  inline ::std::string* release_y();
  inline void set_allocated_y(::std::string* y);

  // optional string z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline const ::std::string& z() const;
  inline void set_z(const ::std::string& value);
  inline void set_z(const char* value);
  inline void set_z(const char* value, size_t size);
  inline ::std::string* mutable_z();
  inline ::std::string* release_z();
  inline void set_allocated_z(::std::string* z);

  // optional int32 value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cBufferNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* x_;
  ::std::string* y_;
  ::std::string* z_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fproto_2eproto();
  friend void protobuf_AssignDesc_proto_2fproto_2eproto();
  friend void protobuf_ShutdownFile_proto_2fproto_2eproto();

  void InitAsDefaultInstance();
  static cBufferNode* default_instance_;
};
// ===================================================================


// ===================================================================

// cVector3

// required string x = 1;
inline bool cVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cVector3::clear_x() {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    x_->clear();
  }
  clear_has_x();
}
inline const ::std::string& cVector3::x() const {
  return *x_;
}
inline void cVector3::set_x(const ::std::string& value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void cVector3::set_x(const char* value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void cVector3::set_x(const char* value, size_t size) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cVector3::mutable_x() {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  return x_;
}
inline ::std::string* cVector3::release_x() {
  clear_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_;
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cVector3::set_allocated_x(::std::string* x) {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (x) {
    set_has_x();
    x_ = x;
  } else {
    clear_has_x();
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string y = 2;
inline bool cVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cVector3::clear_y() {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    y_->clear();
  }
  clear_has_y();
}
inline const ::std::string& cVector3::y() const {
  return *y_;
}
inline void cVector3::set_y(const ::std::string& value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void cVector3::set_y(const char* value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void cVector3::set_y(const char* value, size_t size) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cVector3::mutable_y() {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  return y_;
}
inline ::std::string* cVector3::release_y() {
  clear_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_;
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cVector3::set_allocated_y(::std::string* y) {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (y) {
    set_has_y();
    y_ = y;
  } else {
    clear_has_y();
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string z = 3;
inline bool cVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cVector3::clear_z() {
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    z_->clear();
  }
  clear_has_z();
}
inline const ::std::string& cVector3::z() const {
  return *z_;
}
inline void cVector3::set_z(const ::std::string& value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(value);
}
inline void cVector3::set_z(const char* value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(value);
}
inline void cVector3::set_z(const char* value, size_t size) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cVector3::mutable_z() {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  return z_;
}
inline ::std::string* cVector3::release_z() {
  clear_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = z_;
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cVector3::set_allocated_z(::std::string* z) {
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (z) {
    set_has_z();
    z_ = z;
  } else {
    clear_has_z();
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// cBufferNode

// optional int32 id = 1;
inline bool cBufferNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cBufferNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cBufferNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cBufferNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 cBufferNode::id() const {
  return id_;
}
inline void cBufferNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool cBufferNode::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cBufferNode::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cBufferNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cBufferNode::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 cBufferNode::type() const {
  return type_;
}
inline void cBufferNode::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string x = 3;
inline bool cBufferNode::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cBufferNode::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cBufferNode::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cBufferNode::clear_x() {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    x_->clear();
  }
  clear_has_x();
}
inline const ::std::string& cBufferNode::x() const {
  return *x_;
}
inline void cBufferNode::set_x(const ::std::string& value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void cBufferNode::set_x(const char* value) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(value);
}
inline void cBufferNode::set_x(const char* value, size_t size) {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  x_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cBufferNode::mutable_x() {
  set_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    x_ = new ::std::string;
  }
  return x_;
}
inline ::std::string* cBufferNode::release_x() {
  clear_has_x();
  if (x_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = x_;
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cBufferNode::set_allocated_x(::std::string* x) {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (x) {
    set_has_x();
    x_ = x;
  } else {
    clear_has_x();
    x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string y = 4;
inline bool cBufferNode::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cBufferNode::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cBufferNode::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cBufferNode::clear_y() {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    y_->clear();
  }
  clear_has_y();
}
inline const ::std::string& cBufferNode::y() const {
  return *y_;
}
inline void cBufferNode::set_y(const ::std::string& value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void cBufferNode::set_y(const char* value) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(value);
}
inline void cBufferNode::set_y(const char* value, size_t size) {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  y_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cBufferNode::mutable_y() {
  set_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    y_ = new ::std::string;
  }
  return y_;
}
inline ::std::string* cBufferNode::release_y() {
  clear_has_y();
  if (y_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = y_;
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cBufferNode::set_allocated_y(::std::string* y) {
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (y) {
    set_has_y();
    y_ = y;
  } else {
    clear_has_y();
    y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string z = 5;
inline bool cBufferNode::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void cBufferNode::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void cBufferNode::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void cBufferNode::clear_z() {
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    z_->clear();
  }
  clear_has_z();
}
inline const ::std::string& cBufferNode::z() const {
  return *z_;
}
inline void cBufferNode::set_z(const ::std::string& value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(value);
}
inline void cBufferNode::set_z(const char* value) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(value);
}
inline void cBufferNode::set_z(const char* value, size_t size) {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  z_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cBufferNode::mutable_z() {
  set_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    z_ = new ::std::string;
  }
  return z_;
}
inline ::std::string* cBufferNode::release_z() {
  clear_has_z();
  if (z_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = z_;
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void cBufferNode::set_allocated_z(::std::string* z) {
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (z) {
    set_has_z();
    z_ = z;
  } else {
    clear_has_z();
    z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 value = 6;
inline bool cBufferNode::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void cBufferNode::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void cBufferNode::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void cBufferNode::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 cBufferNode::value() const {
  return value_;
}
inline void cBufferNode::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 time = 7;
inline bool cBufferNode::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void cBufferNode::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void cBufferNode::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void cBufferNode::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 cBufferNode::time() const {
  return time_;
}
inline void cBufferNode::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fproto_2eproto__INCLUDED
