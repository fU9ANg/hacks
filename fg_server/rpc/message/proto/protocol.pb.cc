// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TankProtocol {

namespace {

const ::google::protobuf::Descriptor* cEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* cTankNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cTankNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* sEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* sAddTank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sAddTank_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetTankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetTankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetTankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetTankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* sAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* cUpdateTankPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cUpdateTankPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* cAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* sAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* sAddBuffToBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sAddBuffToBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* sCleanBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sCleanBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetBuffList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetBuffList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetBuffList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetBuffList_reflection_ = NULL;
const ::google::protobuf::Descriptor* cCannonNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cCannonNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* cGetCannonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cGetCannonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sGetCannonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sGetCannonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* sUpdateCannonAttack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sUpdateCannonAttack_reflection_ = NULL;
const ::google::protobuf::Descriptor* cDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* sDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* cReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* sReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* sLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sLogout_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fprotocol_2eproto() {
  protobuf_AddDesc_proto_2fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/protocol.proto");
  GOOGLE_CHECK(file != NULL);
  cEnter_descriptor_ = file->message_type(0);
  static const int cEnter_offsets_[1] = {
  };
  cEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cEnter_descriptor_,
      cEnter::default_instance_,
      cEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cEnter));
  cTankNode_descriptor_ = file->message_type(1);
  static const int cTankNode_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, position1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, position2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, position3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, list_),
  };
  cTankNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cTankNode_descriptor_,
      cTankNode::default_instance_,
      cTankNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cTankNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cTankNode));
  sEnter_descriptor_ = file->message_type(2);
  static const int sEnter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sEnter, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sEnter, message_),
  };
  sEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sEnter_descriptor_,
      sEnter::default_instance_,
      sEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sEnter));
  sAddTank_descriptor_ = file->message_type(3);
  static const int sAddTank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddTank, node_),
  };
  sAddTank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sAddTank_descriptor_,
      sAddTank::default_instance_,
      sAddTank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddTank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddTank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sAddTank));
  cGetTankList_descriptor_ = file->message_type(4);
  static const int cGetTankList_offsets_[1] = {
  };
  cGetTankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetTankList_descriptor_,
      cGetTankList::default_instance_,
      cGetTankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetTankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetTankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetTankList));
  sGetTankList_descriptor_ = file->message_type(5);
  static const int sGetTankList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTankList, list_),
  };
  sGetTankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetTankList_descriptor_,
      sGetTankList::default_instance_,
      sGetTankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetTankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetTankList));
  cAttack_descriptor_ = file->message_type(6);
  static const int cAttack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAttack, attacktankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAttack, beattackedtankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAttack, damage_),
  };
  cAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cAttack_descriptor_,
      cAttack::default_instance_,
      cAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cAttack));
  sAttack_descriptor_ = file->message_type(7);
  static const int sAttack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAttack, attacktankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAttack, beattackedtankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAttack, damage_),
  };
  sAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sAttack_descriptor_,
      sAttack::default_instance_,
      sAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sAttack));
  cUpdateTankPos_descriptor_ = file->message_type(8);
  static const int cUpdateTankPos_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, tankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, position1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, position2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, position3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, list_),
  };
  cUpdateTankPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cUpdateTankPos_descriptor_,
      cUpdateTankPos::default_instance_,
      cUpdateTankPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cUpdateTankPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cUpdateTankPos));
  cAddBuff_descriptor_ = file->message_type(9);
  static const int cAddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAddBuff, tankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAddBuff, bufferid_),
  };
  cAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cAddBuff_descriptor_,
      cAddBuff::default_instance_,
      cAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cAddBuff));
  sAddBuff_descriptor_ = file->message_type(10);
  static const int sAddBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuff, tankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuff, bufferid_),
  };
  sAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sAddBuff_descriptor_,
      sAddBuff::default_instance_,
      sAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sAddBuff));
  sAddBuffToBattleField_descriptor_ = file->message_type(11);
  static const int sAddBuffToBattleField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuffToBattleField, buffer_),
  };
  sAddBuffToBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sAddBuffToBattleField_descriptor_,
      sAddBuffToBattleField::default_instance_,
      sAddBuffToBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuffToBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sAddBuffToBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sAddBuffToBattleField));
  sCleanBuff_descriptor_ = file->message_type(12);
  static const int sCleanBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sCleanBuff, id_),
  };
  sCleanBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sCleanBuff_descriptor_,
      sCleanBuff::default_instance_,
      sCleanBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sCleanBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sCleanBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sCleanBuff));
  cGetBuffList_descriptor_ = file->message_type(13);
  static const int cGetBuffList_offsets_[1] = {
  };
  cGetBuffList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetBuffList_descriptor_,
      cGetBuffList::default_instance_,
      cGetBuffList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetBuffList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetBuffList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetBuffList));
  sGetBuffList_descriptor_ = file->message_type(14);
  static const int sGetBuffList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetBuffList, list_),
  };
  sGetBuffList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetBuffList_descriptor_,
      sGetBuffList::default_instance_,
      sGetBuffList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetBuffList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetBuffList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetBuffList));
  cCannonNode_descriptor_ = file->message_type(15);
  static const int cCannonNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, cannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, position1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, position2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, position3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, area_),
  };
  cCannonNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cCannonNode_descriptor_,
      cCannonNode::default_instance_,
      cCannonNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cCannonNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cCannonNode));
  cGetCannonList_descriptor_ = file->message_type(16);
  static const int cGetCannonList_offsets_[1] = {
  };
  cGetCannonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cGetCannonList_descriptor_,
      cGetCannonList::default_instance_,
      cGetCannonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetCannonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cGetCannonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cGetCannonList));
  sGetCannonList_descriptor_ = file->message_type(17);
  static const int sGetCannonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCannonList, list_),
  };
  sGetCannonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sGetCannonList_descriptor_,
      sGetCannonList::default_instance_,
      sGetCannonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCannonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sGetCannonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sGetCannonList));
  sUpdateCannonAttack_descriptor_ = file->message_type(18);
  static const int sUpdateCannonAttack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateCannonAttack, cannonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateCannonAttack, tankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateCannonAttack, damage_),
  };
  sUpdateCannonAttack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sUpdateCannonAttack_descriptor_,
      sUpdateCannonAttack::default_instance_,
      sUpdateCannonAttack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateCannonAttack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sUpdateCannonAttack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sUpdateCannonAttack));
  cDeath_descriptor_ = file->message_type(19);
  static const int cDeath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDeath, tankid_),
  };
  cDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cDeath_descriptor_,
      cDeath::default_instance_,
      cDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cDeath));
  sDeath_descriptor_ = file->message_type(20);
  static const int sDeath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDeath, tankid_),
  };
  sDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sDeath_descriptor_,
      sDeath::default_instance_,
      sDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sDeath));
  cReborn_descriptor_ = file->message_type(21);
  static const int cReborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cReborn, tankid_),
  };
  cReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cReborn_descriptor_,
      cReborn::default_instance_,
      cReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cReborn));
  sReborn_descriptor_ = file->message_type(22);
  static const int sReborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sReborn, tankid_),
  };
  sReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sReborn_descriptor_,
      sReborn::default_instance_,
      sReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sReborn));
  sLogout_descriptor_ = file->message_type(23);
  static const int sLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, tankid_),
  };
  sLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sLogout_descriptor_,
      sLogout::default_instance_,
      sLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sLogout));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cEnter_descriptor_, &cEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cTankNode_descriptor_, &cTankNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sEnter_descriptor_, &sEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sAddTank_descriptor_, &sAddTank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetTankList_descriptor_, &cGetTankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetTankList_descriptor_, &sGetTankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cAttack_descriptor_, &cAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sAttack_descriptor_, &sAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cUpdateTankPos_descriptor_, &cUpdateTankPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cAddBuff_descriptor_, &cAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sAddBuff_descriptor_, &sAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sAddBuffToBattleField_descriptor_, &sAddBuffToBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sCleanBuff_descriptor_, &sCleanBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetBuffList_descriptor_, &cGetBuffList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetBuffList_descriptor_, &sGetBuffList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cCannonNode_descriptor_, &cCannonNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cGetCannonList_descriptor_, &cGetCannonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sGetCannonList_descriptor_, &sGetCannonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sUpdateCannonAttack_descriptor_, &sUpdateCannonAttack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cDeath_descriptor_, &cDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sDeath_descriptor_, &sDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cReborn_descriptor_, &cReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sReborn_descriptor_, &sReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sLogout_descriptor_, &sLogout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fprotocol_2eproto() {
  delete cEnter::default_instance_;
  delete cEnter_reflection_;
  delete cTankNode::default_instance_;
  delete cTankNode_reflection_;
  delete sEnter::default_instance_;
  delete sEnter_reflection_;
  delete sAddTank::default_instance_;
  delete sAddTank_reflection_;
  delete cGetTankList::default_instance_;
  delete cGetTankList_reflection_;
  delete sGetTankList::default_instance_;
  delete sGetTankList_reflection_;
  delete cAttack::default_instance_;
  delete cAttack_reflection_;
  delete sAttack::default_instance_;
  delete sAttack_reflection_;
  delete cUpdateTankPos::default_instance_;
  delete cUpdateTankPos_reflection_;
  delete cAddBuff::default_instance_;
  delete cAddBuff_reflection_;
  delete sAddBuff::default_instance_;
  delete sAddBuff_reflection_;
  delete sAddBuffToBattleField::default_instance_;
  delete sAddBuffToBattleField_reflection_;
  delete sCleanBuff::default_instance_;
  delete sCleanBuff_reflection_;
  delete cGetBuffList::default_instance_;
  delete cGetBuffList_reflection_;
  delete sGetBuffList::default_instance_;
  delete sGetBuffList_reflection_;
  delete cCannonNode::default_instance_;
  delete cCannonNode_reflection_;
  delete cGetCannonList::default_instance_;
  delete cGetCannonList_reflection_;
  delete sGetCannonList::default_instance_;
  delete sGetCannonList_reflection_;
  delete sUpdateCannonAttack::default_instance_;
  delete sUpdateCannonAttack_reflection_;
  delete cDeath::default_instance_;
  delete cDeath_reflection_;
  delete sDeath::default_instance_;
  delete sDeath_reflection_;
  delete cReborn::default_instance_;
  delete cReborn_reflection_;
  delete sReborn::default_instance_;
  delete sReborn_reflection_;
  delete sLogout::default_instance_;
  delete sLogout_reflection_;
}

void protobuf_AddDesc_proto_2fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_proto_2fproto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto/protocol.proto\022\014TankProtocol\032\021pr"
    "oto/proto.proto\"\010\n\006cEnter\"\307\001\n\tcTankNode\022"
    "\n\n\002id\030\001 \002(\005\022\034\n\tposition1\030\002 \002(\0132\t.cVector"
    "3\022\034\n\tposition2\030\003 \002(\0132\t.cVector3\022\034\n\tposit"
    "ion3\030\004 \002(\0132\t.cVector3\022\034\n\tdirection\030\005 \002(\013"
    "2\t.cVector3\022\n\n\002hp\030\006 \001(\005\022\016\n\006damage\030\007 \002(\005\022"
    "\032\n\004list\030\010 \003(\0132\014.cBufferNode\")\n\006sEnter\022\016\n"
    "\006result\030\001 \002(\005\022\017\n\007message\030\002 \002(\t\"1\n\010sAddTa"
    "nk\022%\n\004node\030\001 \002(\0132\027.TankProtocol.cTankNod"
    "e\"\016\n\014cGetTankList\"5\n\014sGetTankList\022%\n\004lis"
    "t\030\001 \003(\0132\027.TankProtocol.cTankNode\"I\n\007cAtt"
    "ack\022\024\n\014AttackTankId\030\001 \002(\005\022\030\n\020beAttackedT"
    "ankId\030\002 \002(\005\022\016\n\006damage\030\003 \002(\005\"I\n\007sAttack\022\024"
    "\n\014AttackTankId\030\001 \002(\005\022\030\n\020beAttackedTankId"
    "\030\002 \002(\005\022\016\n\006damage\030\003 \002(\005\"\320\001\n\016cUpdateTankPo"
    "s\022\016\n\006tankId\030\001 \002(\005\022\034\n\tposition1\030\002 \002(\0132\t.c"
    "Vector3\022\034\n\tposition2\030\003 \002(\0132\t.cVector3\022\034\n"
    "\tposition3\030\004 \002(\0132\t.cVector3\022\034\n\tdirection"
    "\030\005 \002(\0132\t.cVector3\022\n\n\002hp\030\006 \001(\005\022\016\n\006damage\030"
    "\007 \002(\005\022\032\n\004list\030\010 \003(\0132\014.cBufferNode\",\n\010cAd"
    "dBuff\022\016\n\006tankId\030\001 \002(\005\022\020\n\010bufferId\030\002 \002(\005\""
    ",\n\010sAddBuff\022\016\n\006tankId\030\001 \002(\005\022\020\n\010bufferId\030"
    "\002 \002(\005\"5\n\025sAddBuffToBattleField\022\034\n\006buffer"
    "\030\001 \002(\0132\014.cBufferNode\"\030\n\nsCleanBuff\022\n\n\002id"
    "\030\001 \002(\005\"\016\n\014cGetBuffList\"*\n\014sGetBuffList\022\032"
    "\n\004list\030\001 \003(\0132\014.cBufferNode\"\265\001\n\013cCannonNo"
    "de\022\020\n\010cannonId\030\001 \002(\005\022\034\n\tposition1\030\002 \002(\0132"
    "\t.cVector3\022\034\n\tposition2\030\003 \002(\0132\t.cVector3"
    "\022\034\n\tposition3\030\004 \002(\0132\t.cVector3\022\034\n\tdirect"
    "ion\030\005 \002(\0132\t.cVector3\022\016\n\006damage\030\006 \002(\005\022\014\n\004"
    "area\030\007 \002(\005\"\020\n\016cGetCannonList\"9\n\016sGetCann"
    "onList\022\'\n\004list\030\001 \003(\0132\031.TankProtocol.cCan"
    "nonNode\"G\n\023sUpdateCannonAttack\022\020\n\010cannon"
    "Id\030\001 \002(\005\022\016\n\006tankId\030\002 \002(\005\022\016\n\006damage\030\003 \002(\005"
    "\"\030\n\006cDeath\022\016\n\006tankId\030\001 \002(\005\"\030\n\006sDeath\022\016\n\006"
    "tankId\030\001 \002(\005\"\031\n\007cReborn\022\016\n\006tankId\030\001 \002(\005\""
    "\031\n\007sReborn\022\016\n\006tankId\030\001 \002(\005\"\031\n\007sLogout\022\016\n"
    "\006tankId\030\001 \002(\005", 1493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/protocol.proto", &protobuf_RegisterTypes);
  cEnter::default_instance_ = new cEnter();
  cTankNode::default_instance_ = new cTankNode();
  sEnter::default_instance_ = new sEnter();
  sAddTank::default_instance_ = new sAddTank();
  cGetTankList::default_instance_ = new cGetTankList();
  sGetTankList::default_instance_ = new sGetTankList();
  cAttack::default_instance_ = new cAttack();
  sAttack::default_instance_ = new sAttack();
  cUpdateTankPos::default_instance_ = new cUpdateTankPos();
  cAddBuff::default_instance_ = new cAddBuff();
  sAddBuff::default_instance_ = new sAddBuff();
  sAddBuffToBattleField::default_instance_ = new sAddBuffToBattleField();
  sCleanBuff::default_instance_ = new sCleanBuff();
  cGetBuffList::default_instance_ = new cGetBuffList();
  sGetBuffList::default_instance_ = new sGetBuffList();
  cCannonNode::default_instance_ = new cCannonNode();
  cGetCannonList::default_instance_ = new cGetCannonList();
  sGetCannonList::default_instance_ = new sGetCannonList();
  sUpdateCannonAttack::default_instance_ = new sUpdateCannonAttack();
  cDeath::default_instance_ = new cDeath();
  sDeath::default_instance_ = new sDeath();
  cReborn::default_instance_ = new cReborn();
  sReborn::default_instance_ = new sReborn();
  sLogout::default_instance_ = new sLogout();
  cEnter::default_instance_->InitAsDefaultInstance();
  cTankNode::default_instance_->InitAsDefaultInstance();
  sEnter::default_instance_->InitAsDefaultInstance();
  sAddTank::default_instance_->InitAsDefaultInstance();
  cGetTankList::default_instance_->InitAsDefaultInstance();
  sGetTankList::default_instance_->InitAsDefaultInstance();
  cAttack::default_instance_->InitAsDefaultInstance();
  sAttack::default_instance_->InitAsDefaultInstance();
  cUpdateTankPos::default_instance_->InitAsDefaultInstance();
  cAddBuff::default_instance_->InitAsDefaultInstance();
  sAddBuff::default_instance_->InitAsDefaultInstance();
  sAddBuffToBattleField::default_instance_->InitAsDefaultInstance();
  sCleanBuff::default_instance_->InitAsDefaultInstance();
  cGetBuffList::default_instance_->InitAsDefaultInstance();
  sGetBuffList::default_instance_->InitAsDefaultInstance();
  cCannonNode::default_instance_->InitAsDefaultInstance();
  cGetCannonList::default_instance_->InitAsDefaultInstance();
  sGetCannonList::default_instance_->InitAsDefaultInstance();
  sUpdateCannonAttack::default_instance_->InitAsDefaultInstance();
  cDeath::default_instance_->InitAsDefaultInstance();
  sDeath::default_instance_->InitAsDefaultInstance();
  cReborn::default_instance_->InitAsDefaultInstance();
  sReborn::default_instance_->InitAsDefaultInstance();
  sLogout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fprotocol_2eproto {
  StaticDescriptorInitializer_proto_2fprotocol_2eproto() {
    protobuf_AddDesc_proto_2fprotocol_2eproto();
  }
} static_descriptor_initializer_proto_2fprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cEnter::cEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cEnter::InitAsDefaultInstance() {
}

cEnter::cEnter(const cEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cEnter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cEnter::~cEnter() {
  SharedDtor();
}

void cEnter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cEnter_descriptor_;
}

const cEnter& cEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cEnter* cEnter::default_instance_ = NULL;

cEnter* cEnter::New() const {
  return new cEnter;
}

void cEnter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cEnter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cEnter::MergeFrom(const cEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cEnter::CopyFrom(const cEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cEnter::IsInitialized() const {

  return true;
}

void cEnter::Swap(cEnter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cEnter_descriptor_;
  metadata.reflection = cEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cTankNode::kIdFieldNumber;
const int cTankNode::kPosition1FieldNumber;
const int cTankNode::kPosition2FieldNumber;
const int cTankNode::kPosition3FieldNumber;
const int cTankNode::kDirectionFieldNumber;
const int cTankNode::kHpFieldNumber;
const int cTankNode::kDamageFieldNumber;
const int cTankNode::kListFieldNumber;
#endif  // !_MSC_VER

cTankNode::cTankNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cTankNode::InitAsDefaultInstance() {
  position1_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position2_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position3_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  direction_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
}

cTankNode::cTankNode(const cTankNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cTankNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  position1_ = NULL;
  position2_ = NULL;
  position3_ = NULL;
  direction_ = NULL;
  hp_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cTankNode::~cTankNode() {
  SharedDtor();
}

void cTankNode::SharedDtor() {
  if (this != default_instance_) {
    delete position1_;
    delete position2_;
    delete position3_;
    delete direction_;
  }
}

void cTankNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cTankNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cTankNode_descriptor_;
}

const cTankNode& cTankNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cTankNode* cTankNode::default_instance_ = NULL;

cTankNode* cTankNode::New() const {
  return new cTankNode;
}

void cTankNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_position1()) {
      if (position1_ != NULL) position1_->::cVector3::Clear();
    }
    if (has_position2()) {
      if (position2_ != NULL) position2_->::cVector3::Clear();
    }
    if (has_position3()) {
      if (position3_ != NULL) position3_->::cVector3::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::cVector3::Clear();
    }
    hp_ = 0;
    damage_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cTankNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position1;
        break;
      }

      // required .cVector3 position1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position2;
        break;
      }

      // required .cVector3 position2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position3;
        break;
      }

      // required .cVector3 position3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_direction;
        break;
      }

      // required .cVector3 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // required int32 damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list;
        break;
      }

      // repeated .cBufferNode list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cTankNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position1(), output);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position2(), output);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position3(), output);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->direction(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // required int32 damage = 7;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage(), output);
  }

  // repeated .cBufferNode list = 8;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cTankNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position1(), target);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position2(), target);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position3(), target);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // required int32 damage = 7;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage(), target);
  }

  // repeated .cBufferNode list = 8;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cTankNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .cVector3 position1 = 2;
    if (has_position1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position1());
    }

    // required .cVector3 position2 = 3;
    if (has_position2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position2());
    }

    // required .cVector3 position3 = 4;
    if (has_position3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position3());
    }

    // required .cVector3 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 damage = 7;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .cBufferNode list = 8;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cTankNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cTankNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cTankNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cTankNode::MergeFrom(const cTankNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position1()) {
      mutable_position1()->::cVector3::MergeFrom(from.position1());
    }
    if (from.has_position2()) {
      mutable_position2()->::cVector3::MergeFrom(from.position2());
    }
    if (from.has_position3()) {
      mutable_position3()->::cVector3::MergeFrom(from.position3());
    }
    if (from.has_direction()) {
      mutable_direction()->::cVector3::MergeFrom(from.direction());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cTankNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cTankNode::CopyFrom(const cTankNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cTankNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  if (has_position1()) {
    if (!this->position1().IsInitialized()) return false;
  }
  if (has_position2()) {
    if (!this->position2().IsInitialized()) return false;
  }
  if (has_position3()) {
    if (!this->position3().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void cTankNode::Swap(cTankNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position1_, other->position1_);
    std::swap(position2_, other->position2_);
    std::swap(position3_, other->position3_);
    std::swap(direction_, other->direction_);
    std::swap(hp_, other->hp_);
    std::swap(damage_, other->damage_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cTankNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cTankNode_descriptor_;
  metadata.reflection = cTankNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sEnter::kResultFieldNumber;
const int sEnter::kMessageFieldNumber;
#endif  // !_MSC_VER

sEnter::sEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sEnter::InitAsDefaultInstance() {
}

sEnter::sEnter(const sEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sEnter::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sEnter::~sEnter() {
  SharedDtor();
}

void sEnter::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void sEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sEnter_descriptor_;
}

const sEnter& sEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sEnter* sEnter::default_instance_ = NULL;

sEnter* sEnter::New() const {
  return new sEnter;
}

void sEnter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sEnter::MergeFrom(const sEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sEnter::CopyFrom(const sEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sEnter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sEnter::Swap(sEnter* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sEnter_descriptor_;
  metadata.reflection = sEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sAddTank::kNodeFieldNumber;
#endif  // !_MSC_VER

sAddTank::sAddTank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sAddTank::InitAsDefaultInstance() {
  node_ = const_cast< ::TankProtocol::cTankNode*>(&::TankProtocol::cTankNode::default_instance());
}

sAddTank::sAddTank(const sAddTank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sAddTank::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAddTank::~sAddTank() {
  SharedDtor();
}

void sAddTank::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void sAddTank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sAddTank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sAddTank_descriptor_;
}

const sAddTank& sAddTank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sAddTank* sAddTank::default_instance_ = NULL;

sAddTank* sAddTank::New() const {
  return new sAddTank;
}

void sAddTank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node()) {
      if (node_ != NULL) node_->::TankProtocol::cTankNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sAddTank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TankProtocol.cTankNode node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAddTank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TankProtocol.cTankNode node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sAddTank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TankProtocol.cTankNode node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sAddTank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TankProtocol.cTankNode node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAddTank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sAddTank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sAddTank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sAddTank::MergeFrom(const sAddTank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::TankProtocol::cTankNode::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sAddTank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sAddTank::CopyFrom(const sAddTank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAddTank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void sAddTank::Swap(sAddTank* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sAddTank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sAddTank_descriptor_;
  metadata.reflection = sAddTank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetTankList::cGetTankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetTankList::InitAsDefaultInstance() {
}

cGetTankList::cGetTankList(const cGetTankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetTankList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetTankList::~cGetTankList() {
  SharedDtor();
}

void cGetTankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetTankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetTankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetTankList_descriptor_;
}

const cGetTankList& cGetTankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetTankList* cGetTankList::default_instance_ = NULL;

cGetTankList* cGetTankList::New() const {
  return new cGetTankList;
}

void cGetTankList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetTankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetTankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetTankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetTankList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetTankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetTankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetTankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetTankList::MergeFrom(const cGetTankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetTankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetTankList::CopyFrom(const cGetTankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetTankList::IsInitialized() const {

  return true;
}

void cGetTankList::Swap(cGetTankList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetTankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetTankList_descriptor_;
  metadata.reflection = cGetTankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetTankList::kListFieldNumber;
#endif  // !_MSC_VER

sGetTankList::sGetTankList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetTankList::InitAsDefaultInstance() {
}

sGetTankList::sGetTankList(const sGetTankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetTankList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetTankList::~sGetTankList() {
  SharedDtor();
}

void sGetTankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sGetTankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetTankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetTankList_descriptor_;
}

const sGetTankList& sGetTankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetTankList* sGetTankList::default_instance_ = NULL;

sGetTankList* sGetTankList::New() const {
  return new sGetTankList;
}

void sGetTankList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetTankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TankProtocol.cTankNode list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetTankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TankProtocol.cTankNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetTankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TankProtocol.cTankNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetTankList::ByteSize() const {
  int total_size = 0;

  // repeated .TankProtocol.cTankNode list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetTankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetTankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetTankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetTankList::MergeFrom(const sGetTankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetTankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetTankList::CopyFrom(const sGetTankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetTankList::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void sGetTankList::Swap(sGetTankList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetTankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetTankList_descriptor_;
  metadata.reflection = sGetTankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cAttack::kAttackTankIdFieldNumber;
const int cAttack::kBeAttackedTankIdFieldNumber;
const int cAttack::kDamageFieldNumber;
#endif  // !_MSC_VER

cAttack::cAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cAttack::InitAsDefaultInstance() {
}

cAttack::cAttack(const cAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cAttack::SharedCtor() {
  _cached_size_ = 0;
  attacktankid_ = 0;
  beattackedtankid_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cAttack::~cAttack() {
  SharedDtor();
}

void cAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cAttack_descriptor_;
}

const cAttack& cAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cAttack* cAttack::default_instance_ = NULL;

cAttack* cAttack::New() const {
  return new cAttack;
}

void cAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacktankid_ = 0;
    beattackedtankid_ = 0;
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AttackTankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacktankid_)));
          set_has_attacktankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beAttackedTankId;
        break;
      }

      // required int32 beAttackedTankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beAttackedTankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beattackedtankid_)));
          set_has_beattackedtankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AttackTankId = 1;
  if (has_attacktankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attacktankid(), output);
  }

  // required int32 beAttackedTankId = 2;
  if (has_beattackedtankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beattackedtankid(), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 AttackTankId = 1;
  if (has_attacktankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attacktankid(), target);
  }

  // required int32 beAttackedTankId = 2;
  if (has_beattackedtankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beattackedtankid(), target);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AttackTankId = 1;
    if (has_attacktankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktankid());
    }

    // required int32 beAttackedTankId = 2;
    if (has_beattackedtankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beattackedtankid());
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cAttack::MergeFrom(const cAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacktankid()) {
      set_attacktankid(from.attacktankid());
    }
    if (from.has_beattackedtankid()) {
      set_beattackedtankid(from.beattackedtankid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cAttack::CopyFrom(const cAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cAttack::Swap(cAttack* other) {
  if (other != this) {
    std::swap(attacktankid_, other->attacktankid_);
    std::swap(beattackedtankid_, other->beattackedtankid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cAttack_descriptor_;
  metadata.reflection = cAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sAttack::kAttackTankIdFieldNumber;
const int sAttack::kBeAttackedTankIdFieldNumber;
const int sAttack::kDamageFieldNumber;
#endif  // !_MSC_VER

sAttack::sAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sAttack::InitAsDefaultInstance() {
}

sAttack::sAttack(const sAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sAttack::SharedCtor() {
  _cached_size_ = 0;
  attacktankid_ = 0;
  beattackedtankid_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAttack::~sAttack() {
  SharedDtor();
}

void sAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sAttack_descriptor_;
}

const sAttack& sAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sAttack* sAttack::default_instance_ = NULL;

sAttack* sAttack::New() const {
  return new sAttack;
}

void sAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacktankid_ = 0;
    beattackedtankid_ = 0;
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AttackTankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacktankid_)));
          set_has_attacktankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beAttackedTankId;
        break;
      }

      // required int32 beAttackedTankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beAttackedTankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beattackedtankid_)));
          set_has_beattackedtankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AttackTankId = 1;
  if (has_attacktankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attacktankid(), output);
  }

  // required int32 beAttackedTankId = 2;
  if (has_beattackedtankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beattackedtankid(), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 AttackTankId = 1;
  if (has_attacktankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attacktankid(), target);
  }

  // required int32 beAttackedTankId = 2;
  if (has_beattackedtankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beattackedtankid(), target);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AttackTankId = 1;
    if (has_attacktankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacktankid());
    }

    // required int32 beAttackedTankId = 2;
    if (has_beattackedtankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beattackedtankid());
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sAttack::MergeFrom(const sAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacktankid()) {
      set_attacktankid(from.attacktankid());
    }
    if (from.has_beattackedtankid()) {
      set_beattackedtankid(from.beattackedtankid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sAttack::CopyFrom(const sAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sAttack::Swap(sAttack* other) {
  if (other != this) {
    std::swap(attacktankid_, other->attacktankid_);
    std::swap(beattackedtankid_, other->beattackedtankid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sAttack_descriptor_;
  metadata.reflection = sAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cUpdateTankPos::kTankIdFieldNumber;
const int cUpdateTankPos::kPosition1FieldNumber;
const int cUpdateTankPos::kPosition2FieldNumber;
const int cUpdateTankPos::kPosition3FieldNumber;
const int cUpdateTankPos::kDirectionFieldNumber;
const int cUpdateTankPos::kHpFieldNumber;
const int cUpdateTankPos::kDamageFieldNumber;
const int cUpdateTankPos::kListFieldNumber;
#endif  // !_MSC_VER

cUpdateTankPos::cUpdateTankPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cUpdateTankPos::InitAsDefaultInstance() {
  position1_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position2_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position3_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  direction_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
}

cUpdateTankPos::cUpdateTankPos(const cUpdateTankPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cUpdateTankPos::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  position1_ = NULL;
  position2_ = NULL;
  position3_ = NULL;
  direction_ = NULL;
  hp_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cUpdateTankPos::~cUpdateTankPos() {
  SharedDtor();
}

void cUpdateTankPos::SharedDtor() {
  if (this != default_instance_) {
    delete position1_;
    delete position2_;
    delete position3_;
    delete direction_;
  }
}

void cUpdateTankPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cUpdateTankPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cUpdateTankPos_descriptor_;
}

const cUpdateTankPos& cUpdateTankPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cUpdateTankPos* cUpdateTankPos::default_instance_ = NULL;

cUpdateTankPos* cUpdateTankPos::New() const {
  return new cUpdateTankPos;
}

void cUpdateTankPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
    if (has_position1()) {
      if (position1_ != NULL) position1_->::cVector3::Clear();
    }
    if (has_position2()) {
      if (position2_ != NULL) position2_->::cVector3::Clear();
    }
    if (has_position3()) {
      if (position3_ != NULL) position3_->::cVector3::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::cVector3::Clear();
    }
    hp_ = 0;
    damage_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cUpdateTankPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position1;
        break;
      }

      // required .cVector3 position1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position2;
        break;
      }

      // required .cVector3 position2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position3;
        break;
      }

      // required .cVector3 position3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_direction;
        break;
      }

      // required .cVector3 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // required int32 damage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list;
        break;
      }

      // repeated .cBufferNode list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cUpdateTankPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position1(), output);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position2(), output);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position3(), output);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->direction(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // required int32 damage = 7;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage(), output);
  }

  // repeated .cBufferNode list = 8;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cUpdateTankPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position1(), target);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position2(), target);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position3(), target);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // required int32 damage = 7;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage(), target);
  }

  // repeated .cBufferNode list = 8;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cUpdateTankPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

    // required .cVector3 position1 = 2;
    if (has_position1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position1());
    }

    // required .cVector3 position2 = 3;
    if (has_position2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position2());
    }

    // required .cVector3 position3 = 4;
    if (has_position3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position3());
    }

    // required .cVector3 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 damage = 7;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .cBufferNode list = 8;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cUpdateTankPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cUpdateTankPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cUpdateTankPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cUpdateTankPos::MergeFrom(const cUpdateTankPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
    if (from.has_position1()) {
      mutable_position1()->::cVector3::MergeFrom(from.position1());
    }
    if (from.has_position2()) {
      mutable_position2()->::cVector3::MergeFrom(from.position2());
    }
    if (from.has_position3()) {
      mutable_position3()->::cVector3::MergeFrom(from.position3());
    }
    if (from.has_direction()) {
      mutable_direction()->::cVector3::MergeFrom(from.direction());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cUpdateTankPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cUpdateTankPos::CopyFrom(const cUpdateTankPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cUpdateTankPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  if (has_position1()) {
    if (!this->position1().IsInitialized()) return false;
  }
  if (has_position2()) {
    if (!this->position2().IsInitialized()) return false;
  }
  if (has_position3()) {
    if (!this->position3().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void cUpdateTankPos::Swap(cUpdateTankPos* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(position1_, other->position1_);
    std::swap(position2_, other->position2_);
    std::swap(position3_, other->position3_);
    std::swap(direction_, other->direction_);
    std::swap(hp_, other->hp_);
    std::swap(damage_, other->damage_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cUpdateTankPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cUpdateTankPos_descriptor_;
  metadata.reflection = cUpdateTankPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cAddBuff::kTankIdFieldNumber;
const int cAddBuff::kBufferIdFieldNumber;
#endif  // !_MSC_VER

cAddBuff::cAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cAddBuff::InitAsDefaultInstance() {
}

cAddBuff::cAddBuff(const cAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cAddBuff::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  bufferid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cAddBuff::~cAddBuff() {
  SharedDtor();
}

void cAddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cAddBuff_descriptor_;
}

const cAddBuff& cAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cAddBuff* cAddBuff::default_instance_ = NULL;

cAddBuff* cAddBuff::New() const {
  return new cAddBuff;
}

void cAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
    bufferid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bufferId;
        break;
      }

      // required int32 bufferId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  // required int32 bufferId = 2;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  // required int32 bufferId = 2;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cAddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

    // required int32 bufferId = 2;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cAddBuff::MergeFrom(const cAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cAddBuff::CopyFrom(const cAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cAddBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void cAddBuff::Swap(cAddBuff* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cAddBuff_descriptor_;
  metadata.reflection = cAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sAddBuff::kTankIdFieldNumber;
const int sAddBuff::kBufferIdFieldNumber;
#endif  // !_MSC_VER

sAddBuff::sAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sAddBuff::InitAsDefaultInstance() {
}

sAddBuff::sAddBuff(const sAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sAddBuff::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  bufferid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAddBuff::~sAddBuff() {
  SharedDtor();
}

void sAddBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sAddBuff_descriptor_;
}

const sAddBuff& sAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sAddBuff* sAddBuff::default_instance_ = NULL;

sAddBuff* sAddBuff::New() const {
  return new sAddBuff;
}

void sAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
    bufferid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bufferId;
        break;
      }

      // required int32 bufferId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufferid_)));
          set_has_bufferid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  // required int32 bufferId = 2;
  if (has_bufferid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bufferid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  // required int32 bufferId = 2;
  if (has_bufferid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bufferid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sAddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

    // required int32 bufferId = 2;
    if (has_bufferid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufferid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sAddBuff::MergeFrom(const sAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
    if (from.has_bufferid()) {
      set_bufferid(from.bufferid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sAddBuff::CopyFrom(const sAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAddBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sAddBuff::Swap(sAddBuff* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(bufferid_, other->bufferid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sAddBuff_descriptor_;
  metadata.reflection = sAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sAddBuffToBattleField::kBufferFieldNumber;
#endif  // !_MSC_VER

sAddBuffToBattleField::sAddBuffToBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sAddBuffToBattleField::InitAsDefaultInstance() {
  buffer_ = const_cast< ::cBufferNode*>(&::cBufferNode::default_instance());
}

sAddBuffToBattleField::sAddBuffToBattleField(const sAddBuffToBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sAddBuffToBattleField::SharedCtor() {
  _cached_size_ = 0;
  buffer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sAddBuffToBattleField::~sAddBuffToBattleField() {
  SharedDtor();
}

void sAddBuffToBattleField::SharedDtor() {
  if (this != default_instance_) {
    delete buffer_;
  }
}

void sAddBuffToBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sAddBuffToBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sAddBuffToBattleField_descriptor_;
}

const sAddBuffToBattleField& sAddBuffToBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sAddBuffToBattleField* sAddBuffToBattleField::default_instance_ = NULL;

sAddBuffToBattleField* sAddBuffToBattleField::New() const {
  return new sAddBuffToBattleField;
}

void sAddBuffToBattleField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buffer()) {
      if (buffer_ != NULL) buffer_->::cBufferNode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sAddBuffToBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cBufferNode buffer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sAddBuffToBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cBufferNode buffer = 1;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sAddBuffToBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cBufferNode buffer = 1;
  if (has_buffer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sAddBuffToBattleField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cBufferNode buffer = 1;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sAddBuffToBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sAddBuffToBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sAddBuffToBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sAddBuffToBattleField::MergeFrom(const sAddBuffToBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffer()) {
      mutable_buffer()->::cBufferNode::MergeFrom(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sAddBuffToBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sAddBuffToBattleField::CopyFrom(const sAddBuffToBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sAddBuffToBattleField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sAddBuffToBattleField::Swap(sAddBuffToBattleField* other) {
  if (other != this) {
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sAddBuffToBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sAddBuffToBattleField_descriptor_;
  metadata.reflection = sAddBuffToBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sCleanBuff::kIdFieldNumber;
#endif  // !_MSC_VER

sCleanBuff::sCleanBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sCleanBuff::InitAsDefaultInstance() {
}

sCleanBuff::sCleanBuff(const sCleanBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sCleanBuff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sCleanBuff::~sCleanBuff() {
  SharedDtor();
}

void sCleanBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sCleanBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sCleanBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sCleanBuff_descriptor_;
}

const sCleanBuff& sCleanBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sCleanBuff* sCleanBuff::default_instance_ = NULL;

sCleanBuff* sCleanBuff::New() const {
  return new sCleanBuff;
}

void sCleanBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sCleanBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sCleanBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sCleanBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sCleanBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sCleanBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sCleanBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sCleanBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sCleanBuff::MergeFrom(const sCleanBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sCleanBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sCleanBuff::CopyFrom(const sCleanBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sCleanBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sCleanBuff::Swap(sCleanBuff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sCleanBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sCleanBuff_descriptor_;
  metadata.reflection = sCleanBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetBuffList::cGetBuffList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetBuffList::InitAsDefaultInstance() {
}

cGetBuffList::cGetBuffList(const cGetBuffList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetBuffList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetBuffList::~cGetBuffList() {
  SharedDtor();
}

void cGetBuffList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetBuffList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetBuffList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetBuffList_descriptor_;
}

const cGetBuffList& cGetBuffList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetBuffList* cGetBuffList::default_instance_ = NULL;

cGetBuffList* cGetBuffList::New() const {
  return new cGetBuffList;
}

void cGetBuffList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetBuffList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetBuffList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetBuffList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetBuffList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetBuffList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetBuffList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetBuffList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetBuffList::MergeFrom(const cGetBuffList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetBuffList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetBuffList::CopyFrom(const cGetBuffList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetBuffList::IsInitialized() const {

  return true;
}

void cGetBuffList::Swap(cGetBuffList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetBuffList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetBuffList_descriptor_;
  metadata.reflection = cGetBuffList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetBuffList::kListFieldNumber;
#endif  // !_MSC_VER

sGetBuffList::sGetBuffList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetBuffList::InitAsDefaultInstance() {
}

sGetBuffList::sGetBuffList(const sGetBuffList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetBuffList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetBuffList::~sGetBuffList() {
  SharedDtor();
}

void sGetBuffList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sGetBuffList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetBuffList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetBuffList_descriptor_;
}

const sGetBuffList& sGetBuffList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetBuffList* sGetBuffList::default_instance_ = NULL;

sGetBuffList* sGetBuffList::New() const {
  return new sGetBuffList;
}

void sGetBuffList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetBuffList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cBufferNode list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetBuffList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cBufferNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetBuffList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cBufferNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetBuffList::ByteSize() const {
  int total_size = 0;

  // repeated .cBufferNode list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetBuffList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetBuffList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetBuffList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetBuffList::MergeFrom(const sGetBuffList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetBuffList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetBuffList::CopyFrom(const sGetBuffList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetBuffList::IsInitialized() const {

  return true;
}

void sGetBuffList::Swap(sGetBuffList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetBuffList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetBuffList_descriptor_;
  metadata.reflection = sGetBuffList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cCannonNode::kCannonIdFieldNumber;
const int cCannonNode::kPosition1FieldNumber;
const int cCannonNode::kPosition2FieldNumber;
const int cCannonNode::kPosition3FieldNumber;
const int cCannonNode::kDirectionFieldNumber;
const int cCannonNode::kDamageFieldNumber;
const int cCannonNode::kAreaFieldNumber;
#endif  // !_MSC_VER

cCannonNode::cCannonNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cCannonNode::InitAsDefaultInstance() {
  position1_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position2_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  position3_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
  direction_ = const_cast< ::cVector3*>(&::cVector3::default_instance());
}

cCannonNode::cCannonNode(const cCannonNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cCannonNode::SharedCtor() {
  _cached_size_ = 0;
  cannonid_ = 0;
  position1_ = NULL;
  position2_ = NULL;
  position3_ = NULL;
  direction_ = NULL;
  damage_ = 0;
  area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cCannonNode::~cCannonNode() {
  SharedDtor();
}

void cCannonNode::SharedDtor() {
  if (this != default_instance_) {
    delete position1_;
    delete position2_;
    delete position3_;
    delete direction_;
  }
}

void cCannonNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cCannonNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cCannonNode_descriptor_;
}

const cCannonNode& cCannonNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cCannonNode* cCannonNode::default_instance_ = NULL;

cCannonNode* cCannonNode::New() const {
  return new cCannonNode;
}

void cCannonNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannonid_ = 0;
    if (has_position1()) {
      if (position1_ != NULL) position1_->::cVector3::Clear();
    }
    if (has_position2()) {
      if (position2_ != NULL) position2_->::cVector3::Clear();
    }
    if (has_position3()) {
      if (position3_ != NULL) position3_->::cVector3::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::cVector3::Clear();
    }
    damage_ = 0;
    area_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cCannonNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cannonId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonid_)));
          set_has_cannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position1;
        break;
      }

      // required .cVector3 position1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position2;
        break;
      }

      // required .cVector3 position2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position3;
        break;
      }

      // required .cVector3 position3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_direction;
        break;
      }

      // required .cVector3 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }

      // required int32 damage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_area;
        break;
      }

      // required int32 area = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cCannonNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cannonId = 1;
  if (has_cannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cannonid(), output);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position1(), output);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position2(), output);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position3(), output);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->direction(), output);
  }

  // required int32 damage = 6;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damage(), output);
  }

  // required int32 area = 7;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cCannonNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cannonId = 1;
  if (has_cannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cannonid(), target);
  }

  // required .cVector3 position1 = 2;
  if (has_position1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position1(), target);
  }

  // required .cVector3 position2 = 3;
  if (has_position2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position2(), target);
  }

  // required .cVector3 position3 = 4;
  if (has_position3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position3(), target);
  }

  // required .cVector3 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }

  // required int32 damage = 6;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damage(), target);
  }

  // required int32 area = 7;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cCannonNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cannonId = 1;
    if (has_cannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonid());
    }

    // required .cVector3 position1 = 2;
    if (has_position1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position1());
    }

    // required .cVector3 position2 = 3;
    if (has_position2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position2());
    }

    // required .cVector3 position3 = 4;
    if (has_position3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position3());
    }

    // required .cVector3 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // required int32 damage = 6;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 area = 7;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cCannonNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cCannonNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cCannonNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cCannonNode::MergeFrom(const cCannonNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannonid()) {
      set_cannonid(from.cannonid());
    }
    if (from.has_position1()) {
      mutable_position1()->::cVector3::MergeFrom(from.position1());
    }
    if (from.has_position2()) {
      mutable_position2()->::cVector3::MergeFrom(from.position2());
    }
    if (from.has_position3()) {
      mutable_position3()->::cVector3::MergeFrom(from.position3());
    }
    if (from.has_direction()) {
      mutable_direction()->::cVector3::MergeFrom(from.direction());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cCannonNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cCannonNode::CopyFrom(const cCannonNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cCannonNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_position1()) {
    if (!this->position1().IsInitialized()) return false;
  }
  if (has_position2()) {
    if (!this->position2().IsInitialized()) return false;
  }
  if (has_position3()) {
    if (!this->position3().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void cCannonNode::Swap(cCannonNode* other) {
  if (other != this) {
    std::swap(cannonid_, other->cannonid_);
    std::swap(position1_, other->position1_);
    std::swap(position2_, other->position2_);
    std::swap(position3_, other->position3_);
    std::swap(direction_, other->direction_);
    std::swap(damage_, other->damage_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cCannonNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cCannonNode_descriptor_;
  metadata.reflection = cCannonNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cGetCannonList::cGetCannonList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cGetCannonList::InitAsDefaultInstance() {
}

cGetCannonList::cGetCannonList(const cGetCannonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cGetCannonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cGetCannonList::~cGetCannonList() {
  SharedDtor();
}

void cGetCannonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cGetCannonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cGetCannonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cGetCannonList_descriptor_;
}

const cGetCannonList& cGetCannonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cGetCannonList* cGetCannonList::default_instance_ = NULL;

cGetCannonList* cGetCannonList::New() const {
  return new cGetCannonList;
}

void cGetCannonList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cGetCannonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cGetCannonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cGetCannonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cGetCannonList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cGetCannonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cGetCannonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cGetCannonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cGetCannonList::MergeFrom(const cGetCannonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cGetCannonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cGetCannonList::CopyFrom(const cGetCannonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cGetCannonList::IsInitialized() const {

  return true;
}

void cGetCannonList::Swap(cGetCannonList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cGetCannonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cGetCannonList_descriptor_;
  metadata.reflection = cGetCannonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sGetCannonList::kListFieldNumber;
#endif  // !_MSC_VER

sGetCannonList::sGetCannonList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sGetCannonList::InitAsDefaultInstance() {
}

sGetCannonList::sGetCannonList(const sGetCannonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sGetCannonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sGetCannonList::~sGetCannonList() {
  SharedDtor();
}

void sGetCannonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sGetCannonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sGetCannonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sGetCannonList_descriptor_;
}

const sGetCannonList& sGetCannonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sGetCannonList* sGetCannonList::default_instance_ = NULL;

sGetCannonList* sGetCannonList::New() const {
  return new sGetCannonList;
}

void sGetCannonList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sGetCannonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TankProtocol.cCannonNode list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sGetCannonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TankProtocol.cCannonNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sGetCannonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TankProtocol.cCannonNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sGetCannonList::ByteSize() const {
  int total_size = 0;

  // repeated .TankProtocol.cCannonNode list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sGetCannonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sGetCannonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sGetCannonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sGetCannonList::MergeFrom(const sGetCannonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sGetCannonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sGetCannonList::CopyFrom(const sGetCannonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sGetCannonList::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void sGetCannonList::Swap(sGetCannonList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sGetCannonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sGetCannonList_descriptor_;
  metadata.reflection = sGetCannonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sUpdateCannonAttack::kCannonIdFieldNumber;
const int sUpdateCannonAttack::kTankIdFieldNumber;
const int sUpdateCannonAttack::kDamageFieldNumber;
#endif  // !_MSC_VER

sUpdateCannonAttack::sUpdateCannonAttack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sUpdateCannonAttack::InitAsDefaultInstance() {
}

sUpdateCannonAttack::sUpdateCannonAttack(const sUpdateCannonAttack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sUpdateCannonAttack::SharedCtor() {
  _cached_size_ = 0;
  cannonid_ = 0;
  tankid_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sUpdateCannonAttack::~sUpdateCannonAttack() {
  SharedDtor();
}

void sUpdateCannonAttack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sUpdateCannonAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sUpdateCannonAttack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sUpdateCannonAttack_descriptor_;
}

const sUpdateCannonAttack& sUpdateCannonAttack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sUpdateCannonAttack* sUpdateCannonAttack::default_instance_ = NULL;

sUpdateCannonAttack* sUpdateCannonAttack::New() const {
  return new sUpdateCannonAttack;
}

void sUpdateCannonAttack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannonid_ = 0;
    tankid_ = 0;
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sUpdateCannonAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cannonId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonid_)));
          set_has_cannonid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tankId;
        break;
      }

      // required int32 tankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sUpdateCannonAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cannonId = 1;
  if (has_cannonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cannonid(), output);
  }

  // required int32 tankId = 2;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tankid(), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sUpdateCannonAttack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cannonId = 1;
  if (has_cannonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cannonid(), target);
  }

  // required int32 tankId = 2;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tankid(), target);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sUpdateCannonAttack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cannonId = 1;
    if (has_cannonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonid());
    }

    // required int32 tankId = 2;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sUpdateCannonAttack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sUpdateCannonAttack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sUpdateCannonAttack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sUpdateCannonAttack::MergeFrom(const sUpdateCannonAttack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannonid()) {
      set_cannonid(from.cannonid());
    }
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sUpdateCannonAttack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sUpdateCannonAttack::CopyFrom(const sUpdateCannonAttack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sUpdateCannonAttack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void sUpdateCannonAttack::Swap(sUpdateCannonAttack* other) {
  if (other != this) {
    std::swap(cannonid_, other->cannonid_);
    std::swap(tankid_, other->tankid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sUpdateCannonAttack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sUpdateCannonAttack_descriptor_;
  metadata.reflection = sUpdateCannonAttack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cDeath::kTankIdFieldNumber;
#endif  // !_MSC_VER

cDeath::cDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cDeath::InitAsDefaultInstance() {
}

cDeath::cDeath(const cDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cDeath::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cDeath::~cDeath() {
  SharedDtor();
}

void cDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cDeath_descriptor_;
}

const cDeath& cDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cDeath* cDeath::default_instance_ = NULL;

cDeath* cDeath::New() const {
  return new cDeath;
}

void cDeath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cDeath::MergeFrom(const cDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cDeath::CopyFrom(const cDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cDeath::Swap(cDeath* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cDeath_descriptor_;
  metadata.reflection = cDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sDeath::kTankIdFieldNumber;
#endif  // !_MSC_VER

sDeath::sDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sDeath::InitAsDefaultInstance() {
}

sDeath::sDeath(const sDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sDeath::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sDeath::~sDeath() {
  SharedDtor();
}

void sDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sDeath_descriptor_;
}

const sDeath& sDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sDeath* sDeath::default_instance_ = NULL;

sDeath* sDeath::New() const {
  return new sDeath;
}

void sDeath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sDeath::MergeFrom(const sDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sDeath::CopyFrom(const sDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sDeath::Swap(sDeath* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sDeath_descriptor_;
  metadata.reflection = sDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cReborn::kTankIdFieldNumber;
#endif  // !_MSC_VER

cReborn::cReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cReborn::InitAsDefaultInstance() {
}

cReborn::cReborn(const cReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cReborn::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cReborn::~cReborn() {
  SharedDtor();
}

void cReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cReborn_descriptor_;
}

const cReborn& cReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

cReborn* cReborn::default_instance_ = NULL;

cReborn* cReborn::New() const {
  return new cReborn;
}

void cReborn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cReborn::MergeFrom(const cReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cReborn::CopyFrom(const cReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cReborn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void cReborn::Swap(cReborn* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cReborn_descriptor_;
  metadata.reflection = cReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sReborn::kTankIdFieldNumber;
#endif  // !_MSC_VER

sReborn::sReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sReborn::InitAsDefaultInstance() {
}

sReborn::sReborn(const sReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sReborn::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sReborn::~sReborn() {
  SharedDtor();
}

void sReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sReborn_descriptor_;
}

const sReborn& sReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sReborn* sReborn::default_instance_ = NULL;

sReborn* sReborn::New() const {
  return new sReborn;
}

void sReborn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sReborn::MergeFrom(const sReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sReborn::CopyFrom(const sReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sReborn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sReborn::Swap(sReborn* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sReborn_descriptor_;
  metadata.reflection = sReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sLogout::kTankIdFieldNumber;
#endif  // !_MSC_VER

sLogout::sLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sLogout::InitAsDefaultInstance() {
}

sLogout::sLogout(const sLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sLogout::SharedCtor() {
  _cached_size_ = 0;
  tankid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sLogout::~sLogout() {
  SharedDtor();
}

void sLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sLogout_descriptor_;
}

const sLogout& sLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fprotocol_2eproto();
  return *default_instance_;
}

sLogout* sLogout::default_instance_ = NULL;

sLogout* sLogout::New() const {
  return new sLogout;
}

void sLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tankid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tankId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tankid_)));
          set_has_tankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tankId = 1;
  if (has_tankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tankId = 1;
    if (has_tankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sLogout::MergeFrom(const sLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tankid()) {
      set_tankid(from.tankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sLogout::CopyFrom(const sLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void sLogout::Swap(sLogout* other) {
  if (other != this) {
    std::swap(tankid_, other->tankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sLogout_descriptor_;
  metadata.reflection = sLogout_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TankProtocol

// @@protoc_insertion_point(global_scope)
