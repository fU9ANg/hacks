// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* cVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* cBufferNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cBufferNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fproto_2eproto() {
  protobuf_AddDesc_proto_2fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/proto.proto");
  GOOGLE_CHECK(file != NULL);
  cVector3_descriptor_ = file->message_type(0);
  static const int cVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cVector3, z_),
  };
  cVector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cVector3_descriptor_,
      cVector3::default_instance_,
      cVector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cVector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cVector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cVector3));
  cBufferNode_descriptor_ = file->message_type(1);
  static const int cBufferNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, time_),
  };
  cBufferNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cBufferNode_descriptor_,
      cBufferNode::default_instance_,
      cBufferNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cBufferNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cBufferNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cVector3_descriptor_, &cVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cBufferNode_descriptor_, &cBufferNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fproto_2eproto() {
  delete cVector3::default_instance_;
  delete cVector3_reflection_;
  delete cBufferNode::default_instance_;
  delete cBufferNode_reflection_;
}

void protobuf_AddDesc_proto_2fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/proto.proto\"+\n\010cVector3\022\t\n\001x\030\001 \002"
    "(\t\022\t\n\001y\030\002 \002(\t\022\t\n\001z\030\003 \002(\t\"e\n\013cBufferNode\022"
    "\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\t\n\001x\030\003 \001(\t\022\t\n\001"
    "y\030\004 \001(\t\022\t\n\001z\030\005 \001(\t\022\r\n\005value\030\006 \001(\005\022\014\n\004tim"
    "e\030\007 \001(\005", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/proto.proto", &protobuf_RegisterTypes);
  cVector3::default_instance_ = new cVector3();
  cBufferNode::default_instance_ = new cBufferNode();
  cVector3::default_instance_->InitAsDefaultInstance();
  cBufferNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fproto_2eproto {
  StaticDescriptorInitializer_proto_2fproto_2eproto() {
    protobuf_AddDesc_proto_2fproto_2eproto();
  }
} static_descriptor_initializer_proto_2fproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int cVector3::kXFieldNumber;
const int cVector3::kYFieldNumber;
const int cVector3::kZFieldNumber;
#endif  // !_MSC_VER

cVector3::cVector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cVector3::InitAsDefaultInstance() {
}

cVector3::cVector3(const cVector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cVector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cVector3::~cVector3() {
  SharedDtor();
}

void cVector3::SharedDtor() {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (this != default_instance_) {
  }
}

void cVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cVector3_descriptor_;
}

const cVector3& cVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fproto_2eproto();
  return *default_instance_;
}

cVector3* cVector3::default_instance_ = NULL;

cVector3* cVector3::New() const {
  return new cVector3;
}

void cVector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x()) {
      if (x_ != &::google::protobuf::internal::kEmptyString) {
        x_->clear();
      }
    }
    if (has_y()) {
      if (y_ != &::google::protobuf::internal::kEmptyString) {
        y_->clear();
      }
    }
    if (has_z()) {
      if (z_ != &::google::protobuf::internal::kEmptyString) {
        z_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->x().data(), this->x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // required string y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->y().data(), this->y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_z;
        break;
      }

      // required string z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_z()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->z().data(), this->z().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->x(), output);
  }

  // required string y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->y(), output);
  }

  // required string z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cVector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->x(), target);
  }

  // required string y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->y(), target);
  }

  // required string z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cVector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // required string y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

    // required string z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cVector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cVector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cVector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cVector3::MergeFrom(const cVector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cVector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cVector3::CopyFrom(const cVector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void cVector3::Swap(cVector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cVector3_descriptor_;
  metadata.reflection = cVector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cBufferNode::kIdFieldNumber;
const int cBufferNode::kTypeFieldNumber;
const int cBufferNode::kXFieldNumber;
const int cBufferNode::kYFieldNumber;
const int cBufferNode::kZFieldNumber;
const int cBufferNode::kValueFieldNumber;
const int cBufferNode::kTimeFieldNumber;
#endif  // !_MSC_VER

cBufferNode::cBufferNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cBufferNode::InitAsDefaultInstance() {
}

cBufferNode::cBufferNode(const cBufferNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cBufferNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cBufferNode::~cBufferNode() {
  SharedDtor();
}

void cBufferNode::SharedDtor() {
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (this != default_instance_) {
  }
}

void cBufferNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cBufferNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cBufferNode_descriptor_;
}

const cBufferNode& cBufferNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fproto_2eproto();
  return *default_instance_;
}

cBufferNode* cBufferNode::default_instance_ = NULL;

cBufferNode* cBufferNode::New() const {
  return new cBufferNode;
}

void cBufferNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_x()) {
      if (x_ != &::google::protobuf::internal::kEmptyString) {
        x_->clear();
      }
    }
    if (has_y()) {
      if (y_ != &::google::protobuf::internal::kEmptyString) {
        y_->clear();
      }
    }
    if (has_z()) {
      if (z_ != &::google::protobuf::internal::kEmptyString) {
        z_->clear();
      }
    }
    value_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cBufferNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x;
        break;
      }

      // optional string x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->x().data(), this->x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y;
        break;
      }

      // optional string y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->y().data(), this->y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z;
        break;
      }

      // optional string z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_z()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->z().data(), this->z().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // optional int32 value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cBufferNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->x(), output);
  }

  // optional string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->y(), output);
  }

  // optional string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->z(), output);
  }

  // optional int32 value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }

  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cBufferNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->x(), target);
  }

  // optional string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->y(), target);
  }

  // optional string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->z(), target);
  }

  // optional int32 value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }

  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cBufferNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // optional string y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

    // optional string z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->z());
    }

    // optional int32 value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cBufferNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cBufferNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cBufferNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cBufferNode::MergeFrom(const cBufferNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cBufferNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cBufferNode::CopyFrom(const cBufferNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cBufferNode::IsInitialized() const {

  return true;
}

void cBufferNode::Swap(cBufferNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cBufferNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cBufferNode_descriptor_;
  metadata.reflection = cBufferNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
