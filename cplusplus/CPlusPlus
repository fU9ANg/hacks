
================================================================================
CONST:

在C中使用define, 如:
#define BUFFSIZE    100
表示预处理, BUFFSIZE为一个名字, 100是一个值代替, 而
不是用所谓的"不可思议的数"在程序中.
--------------------------------------------------------------------------------
如上使用时可能会有隐藏的一些很难发现的错误, 而C++使
用const把值替代C中的define, 使用如:
const int buffsize = 100;
--------------------------------------------------------------------------------
而在C中const代表是一个"不能被改变的变通变量",所以如
下代码在C中是不可以的, 而在C++中是可以的.
C:
const buffsize = 100;
char buf[buffsize];
C++:
const buffsize = 100;
char buf[buffsize];
以上说明了, 其值在编译时是否可见.
--------------------------------------------------------------------------------
在C中const默认为外部连接, 而在C++中const默认为内部连
接, 如代码:
C:
const int i;    // 默认为全局
相当于
extern const int i;
C++:
只能使用
extern const int i;
如何使用如下, 则只能在文件/函数内可见
const int i;    // 默认为局部
--------------------------------------------------------------------------------
const也可以用于修饰指针, 如下几种常用形式:
const int *x;       // x为一个指针, 指向一个const int类型
int const *x;       // x为一个指针, 指向一个const int类型
int* const x;       // x为一个常量指针, 声明时需赋值, 指向一个int类型
int const* const x; // x为一个常量指针, 声明时需赋值, 指向一个const int 类型
const int* const x; // x为一个常量指针, 声明时需赋值, 指向一个const int 类型
--------------------------------------------------------------------------------
在做为参数传递给函数时, 也可用const限定函数, 如:
void f1 (const int i)
{
    i = 100;    // 不允许
}
或
void f2 (int i)
{
    const int& j = i;
    j++;        // 不允许
}
--------------------------------------------------------------------------------
函数返回const值, 分为两种情况
1. const如修饰内部类型时, 使用和不使用const无意义.
2. const如修饰用户自定义类型时, 使用const有很大意义, 就是返回的值不能作为左
值被使用, 如例子:
--------------------------------------------------------------------------------
// const修饰内部类型
int f1 ()   { return (1); }
const int f2 ()  { return (2); }
main ()
{
    const int i = f1 ();    // 正确, 返回值的类型没有意义了, 因为编译器会生成一副本
    int j = f2 ();          // 正确, 返回值的类型没有意义了, 因为编译器会生成一副本
}
--------------------------------------------------------------------------------
// const修饰用户自定义类型
class d2
{
    int x;
public:
    d2 (int X = 0) : x (X)    {}
    void modify (void)  { x++; }
};
d2       f1 () { return d2 (); }
const d2 f2 () { return d2 (); }
void     f3 (d2& d)
               { d.modify  (); }
main ()
{
    f1 () = d2 (1);         // 正确
    f1 ().modify ();        // 正确
    f3 (f1 ());             // 正确

    f2 () = d2 (2);         // 错误, 不能作左值
    f2 ().modify ();        // 错误, 不能作左值
    f3 (f2 ());             // 错误, 不能作左值
}
--------------------------------------------------------------------------------
如在类的成员函数中时, 参数传递一般使用const XXX&, 而成员函数返回时,
一般不使用const修饰符, 当然主要看在什么情况下使用.
void XXX :: YYY (const XXX& x)  { ... };
XXX& XXX :: operator+ (const XXX& x)  { ... };

================================================================================
INLINE:
在C中预处理器的不足, 如:
#define SQRT(x) (x*x)
main ()
{
    int i = 10;
    int j = 20;
    int k = SQRT (i+j);
}
而C++使用内联函数代替C中的宏定义.
inline int sqrt (int X)
{
    return (X*X);
}
--------------------------------------------------------------------------------
在类中使用inline修饰符, 如:
class d2
{
    int i, j;
public:
    d2 (int x, int y) : i (x), j (y) {};    // 在类中实现, 默认为内联函数
    void display (void)                     // 在类中实现, 默认为内联函数
    {
        cout << i << j << endl;
    }
};
也可以在类定义外部使用inline修饰符说明为内联函数, 而类中只声明接口.
class d2
{
    int i, j;
public:
    d2 (int x, int y);
    void display (void);
    {
        cout << i << j << endl;
    }
};
inline d2 :: d2 (int x, int y)              // 在类外实现, 使用inline修饰符说明为内联函数
{
    i = x; j = y;
}
inline void display (void)                  // 在类外实现, 使用inline修饰符说明为内联函数
{
    cout << i << j << endl;
}

================================================================================
类的构造函数的析构函数都可以隐藏行为, 因为类可以包含子对象, 子对象的构造函数的析
构函数在子对象创建和消灭时必须被调用. 这些子对象可能是成员对象, 也可以为子类对象
(通过继承)而在类中存在. 如下:
class   A
{
    int i, j, k;
public:
    A (int I = 0)   { i = j = k = I; }
    ~A (void)       { cout << "A :: destructor" << endl; }
};
class   B
{
    A   obj1, obj2, obj3;
    int i;
public:
    B (int I) : i (I) {};
    ~B (void)       { cout << "B :: destructor" << endl; }
};
main (void)
{
    B b (10);
}
order is:
obj1 :: constructor
obj2 :: constructor
obj3 :: constructor
B :: constructor
B :: destructor
obj3 :: destructor
obj2 :: destructor
obj1 :: destructor
--------------------------------------------------------------------------------
预处理还有三大例外: 字符串定义, 字符串串联 和 标志粘贴 如下代码:
字符串定义:
#define DEFINEX(x)  cout << #x << endl;
字符串串联:
#define DEFINEY(y)  cout << #y "=" << y << endl;
标志粘贴:
#define DEFINEZ(z)  char* z##_name; int z##_age;
main (void)
{
    DEFINEZ (person1);
    DEFINEZ (person2);

    person1_name = "mike";
    person2_name = "fU9ANg";
    person1_age  = 25;
    person2_age  = 26;

    cout << person1_name << " "
         << person1_age  << ";"
         << person2_name << " "
         << person2_age  << endl;
}
--------------------------------------------------------------------------------
静态成员函数只能操作静态成员数据.
class   A
{
    static int i;
    int        j;
public:
    static int func (void)
    {
        --i;
        ++j;    // 不允许
        return (i);
    }
);
--------------------------------------------------------------------------------
在C++中使用C函数.
extern "C"
{
    float   f1 (int a, int b);
    int     f2 (void);
}
在头文件中使用如下:
extern "C"
{
#include "outside.h"
}
--------------------------------------------------------------------------------
使用指针/引用时需注意, 如下:
1. 当引用被创建时, 它必须被初始化; 但指针可以在任何时候初始化)
2. 一旦一个引用被初始化为指向一个对象时, 它就不能被改变; 从而指向另一个对象
3. 不能有NULL引用, 但指针可以; 因为引用是和一块合法的存储单元关联
--------------------------------------------------------------------------------
成员函数指针, 就是指向类的成员函数的指针, 如下定义使用.
class   A
{
    void    f1 (float)  const   { cout << "A :: f1 ()" << endl; }
    void    f2 (float)  const   { cout << "A :: f2 ()" << endl; }
    void    f3 (float)  const   { cout << "A :: f3 ()" << endl; }
    void    f4 (float)  const   { cout << "A :: f4 ()" << endl; }
    void    (A :: *ptr[4]) (float) const;
public:
    A (void)
    {
        ptr[0] = &A :: f1;
        ptr[1] = &A :: f2;
        ptr[2] = &A :: f3;
        ptr[3] = &A :: f4;
    }
    void select (int a, float b)
    {
        if (a < 0 || a > 4)
            return;
        (this->*ptr[i]) (b);
    }
};
main (void)
{
    A a;
    for (int i = 0; i < 4; ++i)
        a.select (i, 10.0f);
}
--------------------------------------------------------------------------------
static在什么可见域中定义, 则它在此域中才可见, 其它不可见, 如:
1. 在函数内定义, 则可见域在此函数中.
2. 在文件全局域中定义, 则可见域在此文件中.

TEMPLATE:
定义一个模板的格式如下:
template <类型参数表>
返回类型  函数模板名 (数据参数表)
{
    模板函数体
}
--------------------------------------------------------------------------------
对于学习和使用C++, 最好的方式就是到如下网址:
http://www.cplusplus.com/reference/
